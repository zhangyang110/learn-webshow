/**
 * tvapi
 * The TV Backend api v3.0
 *
 * OpenAPI spec version: 3.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CommonResponse from '../model/CommonResponse';
import Error from '../model/Error';
import InlineResponse2001 from '../model/InlineResponse2001';

/**
* Releases service.
* @module api/ReleasesApi
* @version 3.0
*/
export default class ReleasesApi {

    /**
    * Constructs a new ReleasesApi. 
    * @alias module:api/ReleasesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Returns all app in the database.
     * Only the \&quot;admin\&quot; account can access this.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query Filter. e.g. col1:v1,col2:v2 ...
     * @param {String} opts.fields Fields returned. e.g. col1,col2 ...
     * @param {String} opts.sortby Sorted-by fields. e.g. col1,col2 ...
     * @param {String} opts.order Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
     * @param {Number} opts.limit Limit the size of result set. Must be an integer
     * @param {Number} opts.offset Start position of result set. Must be an integer
     * @param {String} opts.model 获取数据匹配规则 1.默认：匹配字段中包含且不区分大小写  2.accurate：精确匹配，字段完全相等  e.g. accurate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommonResponse} and HTTP response
     */
    releasesGetWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;


      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'fields': opts['fields'],
        'sortby': opts['sortby'],
        'order': opts['order'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'model': opts['model']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CommonResponse;

      return this.apiClient.callApi(
        '/releases', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * Returns all app in the database.
     * Only the \&quot;admin\&quot; account can access this.
     * @param {Object} opts Optional parameters
     * @param {String} opts.query Filter. e.g. col1:v1,col2:v2 ...
     * @param {String} opts.fields Fields returned. e.g. col1,col2 ...
     * @param {String} opts.sortby Sorted-by fields. e.g. col1,col2 ...
     * @param {String} opts.order Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...
     * @param {Number} opts.limit Limit the size of result set. Must be an integer
     * @param {Number} opts.offset Start position of result set. Must be an integer
     * @param {String} opts.model 获取数据匹配规则 1.默认：匹配字段中包含且不区分大小写  2.accurate：精确匹配，字段完全相等  e.g. accurate
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommonResponse}
     */
    releasesGet(opts) {
      return this.releasesGetWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * upload image
     * upload image
     * @param {String} name the name of app
     * @param {File} file The uploaded file data
     * @param {Number} versionCode version code
     * @param {String} versionName version name
     * @param {String} channel app channel
     * @param {String} changeLog change log
     * @param {Boolean} force is force
     * @param {String} md5 md5
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CommonResponse} and HTTP response
     */
    releasesPostWithHttpInfo(name, file, versionCode, versionName, channel, changeLog, force, md5) {
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling releasesPost");
      }

      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling releasesPost");
      }

      // verify the required parameter 'versionCode' is set
      if (versionCode === undefined || versionCode === null) {
        throw new Error("Missing the required parameter 'versionCode' when calling releasesPost");
      }

      // verify the required parameter 'versionName' is set
      if (versionName === undefined || versionName === null) {
        throw new Error("Missing the required parameter 'versionName' when calling releasesPost");
      }

      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling releasesPost");
      }

      // verify the required parameter 'changeLog' is set
      if (changeLog === undefined || changeLog === null) {
        throw new Error("Missing the required parameter 'changeLog' when calling releasesPost");
      }

      // verify the required parameter 'force' is set
      if (force === undefined || force === null) {
        throw new Error("Missing the required parameter 'force' when calling releasesPost");
      }

      // verify the required parameter 'md5' is set
      if (md5 === undefined || md5 === null) {
        throw new Error("Missing the required parameter 'md5' when calling releasesPost");
      }


      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'name': name,
        'file': file,
        'versionCode': versionCode,
        'versionName': versionName,
        'channel': channel,
        'changeLog': changeLog,
        'force': force,
        'md5': md5
      };

      let authNames = ['Bearer'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = CommonResponse;

      return this.apiClient.callApi(
        '/releases', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * upload image
     * upload image
     * @param {String} name the name of app
     * @param {File} file The uploaded file data
     * @param {Number} versionCode version code
     * @param {String} versionName version name
     * @param {String} channel app channel
     * @param {String} changeLog change log
     * @param {Boolean} force is force
     * @param {String} md5 md5
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CommonResponse}
     */
    releasesPost(name, file, versionCode, versionName, channel, changeLog, force, md5) {
      return this.releasesPostWithHttpInfo(name, file, versionCode, versionName, channel, changeLog, force, md5)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * get the latest version.
     * get the latest version.
     * @param {String} name 
     * @param {Number} version The name of the version
     * @param {String} channel The channel of   app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/InlineResponse2001} and HTTP response
     */
    releasesUpgradeGetWithHttpInfo(name, version, channel) {
      let postBody = null;

      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling releasesUpgradeGet");
      }

      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling releasesUpgradeGet");
      }

      // verify the required parameter 'channel' is set
      if (channel === undefined || channel === null) {
        throw new Error("Missing the required parameter 'channel' when calling releasesUpgradeGet");
      }


      let pathParams = {
      };
      let queryParams = {
        'name': name,
        'version': version,
        'channel': channel
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Bearer'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse2001;

      return this.apiClient.callApi(
        '/releases/upgrade', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * get the latest version.
     * get the latest version.
     * @param {String} name 
     * @param {Number} version The name of the version
     * @param {String} channel The channel of   app
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/InlineResponse2001}
     */
    releasesUpgradeGet(name, version, channel) {
      return this.releasesUpgradeGetWithHttpInfo(name, version, channel)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
